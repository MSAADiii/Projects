{
  "version": 3,
  "sources": ["../../../../../apps/validation/validation/public/js/validation_desk.bundle.js"],
  "sourcesContent": ["export default class Grid {\n    constructor(opts) {\n        $.extend(this, opts);\n        this.fieldinfo = {};\n        this.doctype = this.df.options;\n\n        if (this.doctype) {\n            this.meta = frappe.get_meta(this.doctype);\n        }\n        this.fields_map = {};\n        this.template = null;\n        this.multiple_set = false;\n        if (this.frm && this.frm.meta.__form_grid_templates\n            && this.frm.meta.__form_grid_templates[this.df.fieldname]) {\n            this.template = this.frm.meta.__form_grid_templates[this.df.fieldname];\n        }\n\n        this.is_grid = true;\n        this.debounced_refresh = this.refresh.bind(this);\n        this.debounced_refresh = frappe.utils.debounce(this.debounced_refresh, 100);\n    }\n\n    allow_on_grid_editing() {\n        if (frappe.utils.is_xs()) {\n            return false;\n        } else if (this.meta && this.meta.editable_grid || !this.meta) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    make() {\n        let template = `\n\t\t\t<label class=\"control-label\">${__(this.df.label || '')}</label>\n\t\t\t<p class=\"text-muted small grid-description\"></p>\n\t\t\t<div class=\"grid-custom-buttons grid-field\"></div>\n\t\t\t<div class=\"form-grid\">\n\t\t\t\t<div class=\"grid-heading-row\"></div>\n\t\t\t\t<div class=\"grid-body\">\n\t\t\t\t\t<div class=\"rows\"></div>\n\t\t\t\t\t<div class=\"grid-empty text-center\">\n\t\t\t\t\t\t<img\n\t\t\t\t\t\t\tsrc=\"/assets/frappe/images/ui-states/grid-empty-state.svg\"\n\t\t\t\t\t\t\talt=\"Grid Empty State\"\n\t\t\t\t\t\t\tclass=\"grid-empty-illustration\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t${__(\"No Data\")}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"small form-clickable-section grid-footer\">\n\t\t\t\t<div class=\"flex justify-between\">\n\t\t\t\t\t<div class=\"grid-buttons\">\n\t\t\t\t\t\t<button class=\"btn btn-xs btn-danger grid-remove-rows hidden\"\n\t\t\t\t\t\t\tstyle=\"margin-right: 4px;\"\n\t\t\t\t\t\t\tdata-action=\"delete_rows\">\n\t\t\t\t\t\t\t${__(\"Delete\")}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button class=\"btn btn-xs btn-danger grid-remove-all-rows hidden\"\n\t\t\t\t\t\t\tstyle=\"margin-right: 4px;\"\n\t\t\t\t\t\t\tdata-action=\"delete_all_rows\">\n\t\t\t\t\t\t\t${__(\"Delete All\")}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<button class=\"grid-add-multiple-rows btn btn-xs btn-secondary hidden\"\n\t\t\t\t\t\t\tstyle=\"margin-right: 4px;\">\n\t\t\t\t\t\t\t${__(\"Add Multiple\")}</a>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<!-- hack to allow firefox include this in tabs -->\n\t\t\t\t\t\t<button class=\"btn btn-xs btn-secondary grid-add-row\">\n\t\t\t\t\t\t\t${__(\"Add Row\")}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"grid-pagination\">\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"text-right\">\n\t\t\t\t\t\t<a href=\"#\" class=\"grid-download btn btn-xs btn-secondary hidden\">\n\t\t\t\t\t\t\t${__(\"Download\")}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t\t<a href=\"#\" class=\"grid-upload btn btn-xs btn-secondary hidden\">\n\t\t\t\t\t\t\t${__(\"Upload\")}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t`;\n\n        this.wrapper = $(template).appendTo(this.parent);\n        $(this.parent).addClass('form-group');\n        this.set_grid_description();\n\n        frappe.utils.bind_actions_with_object(this.wrapper, this);\n\n        this.form_grid = this.wrapper.find('.form-grid');\n\n        this.setup_add_row();\n\n        this.setup_grid_pagination();\n\n        this.custom_buttons = {};\n        this.grid_buttons = this.wrapper.find('.grid-buttons');\n        this.grid_custom_buttons = this.wrapper.find('.grid-custom-buttons');\n        this.remove_rows_button = this.grid_buttons.find('.grid-remove-rows');\n        this.remove_all_rows_button = this.grid_buttons.find('.grid-remove-all-rows');\n\n        this.setup_allow_bulk_edit();\n        this.setup_check();\n        if (this.df.on_setup) {\n            this.df.on_setup(this);\n        }\n    }\n    set_grid_description() {\n        let description_wrapper = $(this.parent).find('.grid-description');\n        if (this.df.description) {\n            description_wrapper.text(__(this.df.description));\n        } else {\n            description_wrapper.hide();\n        }\n    }\n    setup_grid_pagination() {\n        this.grid_pagination = new GridPagination({\n            grid: this,\n            wrapper: this.wrapper,\n        });\n    }\n\n    setup_check() {\n\n        this.wrapper.on('click', '.grid-row-check', (e) => {\n            var $check = $(e.currentTarget);\n            if ($check.parents('.grid-heading-row:first').length !== 0) {\n                // select all?\n                var checked = $check.prop('checked');\n                $check.parents('.form-grid:first')\n                    .find('.grid-row-check').prop('checked', checked);\n\n                // set all\n                let result_length = this.grid_pagination.get_result_length();\n                let page_index = this.grid_pagination.page_index;\n                let page_length = this.grid_pagination.page_length;\n                for (var ri = (page_index - 1) * page_length; ri < result_length; ri++) {\n                    this.grid_rows[ri].doc.__checked = checked ? 1 : 0;\n                }\n            } else {\n                var docname = $check.parents('.grid-row:first').attr('data-name');\n                this.grid_rows_by_docname[docname].select($check.prop('checked'));\n            }\n            this.refresh_remove_rows_button();\n        });\n\n    }\n\n    delete_rows() {\n        var dirty = false;\n\n        let tasks = [];\n        let selected_children = this.get_selected_children();\n        selected_children.forEach(doc => {\n            tasks.push(() => {\n                if (!this.frm) {\n                    this.df.data = this.get_data();\n                    this.df.data = this.df.data.filter(row => row.idx != doc.idx);\n                }\n                this.grid_rows_by_docname[doc.name].remove();\n                dirty = true;\n            });\n            tasks.push(() => frappe.timeout(0.1));\n        });\n\n        if (!this.frm) {\n            tasks.push(() => {\n                // reorder idx of df.data\n                this.df.data.forEach((row, index) => row.idx = index + 1);\n            });\n        }\n\n        tasks.push(() => {\n            if (dirty) {\n                this.refresh();\n                this.frm && this.frm.script_manager.trigger(this.df.fieldname + \"_delete\", this.doctype);\n            }\n        });\n\n        frappe.run_serially(tasks);\n\n        this.wrapper.find('.grid-heading-row .grid-row-check:checked:first').prop('checked', 0);\n        if (selected_children.length == this.grid_pagination.page_length) {\n            this.scroll_to_top();\n        }\n    }\n\n    delete_all_rows() {\n        frappe.confirm(__(\"Are you sure you want to delete all rows?\"), () => {\n            this.frm.doc[this.df.fieldname] = [];\n            $(this.parent).find('.rows').empty();\n            this.grid_rows = [];\n            this.refresh();\n            this.frm && this.frm.script_manager.trigger(this.df.fieldname + \"_delete\", this.doctype);\n            this.frm && this.frm.dirty();\n            this.scroll_to_top();\n        });\n    }\n\n    scroll_to_top() {\n        frappe.utils.scroll_to(this.wrapper);\n    }\n\n    select_row(name) {\n        this.grid_rows_by_docname[name].select();\n    }\n\n    remove_all() {\n        this.grid_rows.forEach(row => {\n            row.remove();\n        });\n    }\n\n    refresh_remove_rows_button() {\n        if (this.df.cannot_delete_rows) {\n            return;\n        }\n\n        this.remove_rows_button.toggleClass('hidden',\n            this.wrapper.find('.grid-body .grid-row-check:checked:first').length ? false : true);\n\n        let select_all_checkbox_checked = this.wrapper.find('.grid-heading-row .grid-row-check:checked:first').length;\n        let show_delete_all_btn = select_all_checkbox_checked && this.data.length > this.get_selected_children().length;\n        this.remove_all_rows_button.toggleClass('hidden', !show_delete_all_btn);\n    }\n\n    get_selected() {\n        return (this.grid_rows || []).map(row => {\n            return row.doc.__checked ? row.doc.name : null;\n        }).filter(d => {\n            return d;\n        });\n    }\n\n    get_selected_children() {\n        return (this.grid_rows || []).map(row => {\n            return row.doc.__checked ? row.doc : null;\n        }).filter(d => {\n            return d;\n        });\n    }\n\n    reset_grid() {\n        this.visible_columns = [];\n        this.grid_rows = [];\n\n        $(this.parent).find(\".grid-body .grid-row\").remove();\n        this.refresh();\n    }\n\n    make_head() {\n        // labels\n        if (this.header_row) {\n            $(this.parent).find(\".grid-heading-row .grid-row\").remove();\n        }\n        this.header_row = new GridRow({\n            parent: $(this.parent).find(\".grid-heading-row\"),\n            parent_df: this.df,\n            docfields: this.docfields,\n            frm: this.frm,\n            grid: this,\n            configure_columns: true\n        });\n    }\n\n    refresh(force) {\n        if (this.frm && this.frm.setting_dependency) return;\n\n        this.data = this.get_data();\n\n        !this.wrapper && this.make();\n        let $rows = $(this.parent).find('.rows');\n\n        this.setup_fields();\n\n        if (this.frm) {\n            this.display_status = frappe.perm.get_field_display_status(this.df, this.frm.doc,\n                this.perm);\n        } else if (this.df.is_web_form && this.control) {\n            this.display_status = this.control.get_status();\n        } else {\n            // not in form\n            this.display_status = 'Write';\n        }\n\n        if (this.display_status === \"None\") return;\n\n        // redraw\n        this.make_head();\n\n        if (!this.grid_rows) {\n            this.grid_rows = [];\n        }\n\n        this.truncate_rows();\n        this.grid_rows_by_docname = {};\n\n        this.grid_pagination.update_page_numbers();\n        this.render_result_rows($rows, false);\n        this.grid_pagination.check_page_number();\n        this.wrapper.find('.grid-empty').toggleClass('hidden', Boolean(this.data.length));\n\n        // toolbar\n        this.setup_toolbar();\n        this.toggle_checkboxes(this.display_status !== 'Read');\n\n        // sortable\n        if (this.frm && this.is_sortable() && !this.sortable_setup_done) {\n            this.make_sortable($rows);\n            this.sortable_setup_done = true;\n        }\n\n        this.last_display_status = this.display_status;\n        this.last_docname = this.frm && this.frm.docname;\n\n        // red if mandatory\n        this.form_grid.toggleClass('error', !!(this.df.reqd && !(this.data && this.data.length)));\n\n        this.refresh_remove_rows_button();\n\n        this.wrapper.trigger('change');\n    }\n\n\n    render_result_rows($rows, append_row) {\n        let result_length = this.grid_pagination.get_result_length();\n        let page_index = this.grid_pagination.page_index;\n        let page_length = this.grid_pagination.page_length;\n        if (!this.grid_rows) {\n            return;\n        }\n        for (var ri = (page_index - 1) * page_length; ri < result_length; ri++) {\n            var d = this.data[ri];\n            if (!d) {\n                return;\n            }\n            if (d.idx === undefined) {\n                d.idx = ri + 1;\n            }\n            if (d.name === undefined) {\n                d.name = \"row \" + d.idx;\n            }\n            if (this.grid_rows[ri] && !append_row) {\n                var grid_row = this.grid_rows[ri];\n                grid_row.doc = d;\n                grid_row.refresh();\n            } else {\n                var grid_row = new GridRow({\n                    parent: $rows,\n                    parent_df: this.df,\n                    docfields: this.docfields,\n                    doc: d,\n                    frm: this.frm,\n                    grid: this\n                });\n                this.grid_rows[ri] = grid_row;\n            }\n\n            this.grid_rows_by_docname[d.name] = grid_row;\n        }\n    }\n\n    setup_toolbar() {\n\n        if (this.is_editable()) {\n            this.wrapper.find('.grid-footer').toggle(true);\n\n            // show, hide buttons to add rows\n            if (this.cannot_add_rows || (this.df && this.df.cannot_add_rows)) {\n                // add 'hidden' to buttons\n                this.wrapper.find('.grid-add-row, .grid-add-multiple-rows')\n                    .addClass('hidden');\n            } else {\n                // show buttons\n                this.wrapper.find('.grid-add-row').removeClass('hidden');\n\n                if (this.multiple_set) {\n                    this.wrapper.find('.grid-add-multiple-rows').removeClass('hidden');\n                }\n            }\n        } else if (this.grid_rows.length < this.grid_pagination.page_length) {\n            this.wrapper.find('.grid-footer').toggle(false);\n        }\n\n        this.wrapper.find('.grid-add-row, .grid-add-multiple-rows').toggle(this.is_editable());\n\n    }\n\n    truncate_rows() {\n        if (this.grid_rows.length > this.data.length) {\n            // remove extra rows\n            for (var i = this.data.length; i < this.grid_rows.length; i++) {\n                var grid_row = this.grid_rows[i];\n                if (grid_row) grid_row.wrapper.remove();\n            }\n            this.grid_rows.splice(this.data.length);\n        }\n    }\n\n    setup_fields() {\n        // reset docfield\n        if (this.frm && this.frm.docname) {\n            // use doc specific docfield object\n            this.df = frappe.meta.get_docfield(this.frm.doctype, this.df.fieldname,\n                this.frm.docname);\n        } else {\n            // use non-doc specific docfield\n            if (this.df.options) {\n                this.df = frappe.meta.get_docfield(this.df.options, this.df.fieldname) || this.df || null;\n            }\n        }\n\n        if (this.doctype && this.frm) {\n            this.docfields = frappe.meta.get_docfields(this.doctype, this.frm.docname);\n        } else {\n            // fields given in docfield\n            this.docfields = this.df.fields;\n        }\n\n        this.docfields.forEach(df => {\n            this.fields_map[df.fieldname] = df;\n        });\n    }\n\n    refresh_row(docname) {\n        this.grid_rows_by_docname[docname] &&\n            this.grid_rows_by_docname[docname].refresh();\n    }\n\n    make_sortable($rows) {\n        new Sortable($rows.get(0), {\n            group: { name: this.df.fieldname },\n            handle: '.sortable-handle',\n            draggable: '.grid-row',\n            animation: 100,\n            filter: 'li, a',\n            onMove: (event) => {\n                // don't move if editable\n                if (!this.is_editable()) {\n                    return false;\n                }\n                // prevent drag behaviour if _sortable property is \"false\"\n                let idx = $(event.dragged).closest('.grid-row').attr('data-idx');\n                let doc = this.data[idx % this.grid_pagination.page_length];\n                if (doc && doc._sortable === false) {\n                    return false;\n                }\n            },\n            onUpdate: (event) => {\n                let idx = $(event.item).closest('.grid-row').attr('data-idx') - 1;\n                let doc = this.data[idx % this.grid_pagination.page_length];\n                this.renumber_based_on_dom();\n                this.frm.script_manager.trigger(this.df.fieldname + \"_move\", this.df.options, doc.name);\n                this.refresh();\n                this.frm.dirty();\n            }\n        });\n\n        $(this.frm.wrapper).trigger(\"grid-make-sortable\", [this.frm]);\n    }\n\n    get_data() {\n        var data = this.frm ?\n            this.frm.doc[this.df.fieldname] || []\n            : this.df.data || this.get_modal_data();\n        // data.sort(function(a, b) { return a.idx - b.idx});\n        return data;\n    }\n\n    get_modal_data() {\n        return this.df.get_data ? this.df.get_data().filter(data => {\n            if (!this.deleted_docs || !in_list(this.deleted_docs, data.name)) {\n                return data;\n            }\n        }) : [];\n    }\n\n    set_column_disp(fieldname, show) {\n        if ($.isArray(fieldname)) {\n            for (var i = 0, l = fieldname.length; i < l; i++) {\n                var fname = fieldname[i];\n                this.get_docfield(fname).hidden = show ? 0 : 1;\n                this.set_editable_grid_column_disp(fname, show);\n            }\n        } else {\n            this.get_docfield(fieldname).hidden = show ? 0 : 1;\n            this.set_editable_grid_column_disp(fieldname, show);\n        }\n\n        this.debounced_refresh();\n    }\n\n    set_editable_grid_column_disp(fieldname, show) {\n        //Hide columns for editable grids\n        if (this.meta.editable_grid && this.grid_rows) {\n            this.grid_rows.forEach(row => {\n                row.columns_list.forEach(column => {\n                    //Hide the column specified\n                    if (column.df.fieldname == fieldname) {\n                        if (show) {\n                            column.df.hidden = false;\n\n                            //Show the static area and hide field area if it is not the editable row\n                            if (row != frappe.ui.form.editable_row) {\n                                column.static_area.show();\n                                column.field_area && column.field_area.toggle(false);\n                            }\n                            //Hide the static area and show field area if it is the editable row\n                            else {\n                                column.static_area.hide();\n                                column.field_area && column.field_area.toggle(true);\n\n                                //Format the editable column appropriately if it is now visible\n                                if (column.field) {\n                                    column.field.refresh();\n                                    if (column.field.$input) column.field.$input.toggleClass('input-sm', true);\n                                }\n                            }\n                        }\n                        else {\n                            column.df.hidden = true;\n                            column.static_area.hide();\n                        }\n                    }\n                });\n            });\n        }\n\n        this.refresh();\n    }\n\n    toggle_reqd(fieldname, reqd) {\n        this.get_docfield(fieldname).reqd = reqd;\n        this.debounced_refresh();\n    }\n\n    toggle_enable(fieldname, enable) {\n        this.get_docfield(fieldname).read_only = enable ? 0 : 1;\n        this.debounced_refresh();\n    }\n\n    toggle_display(fieldname, show) {\n        this.get_docfield(fieldname).hidden = show ? 0 : 1;\n        this.debounced_refresh();\n    }\n\n    toggle_checkboxes(enable) {\n        this.wrapper.find(\".grid-row-check\").prop('disabled', !enable)\n    }\n\n    get_docfield(fieldname) {\n        return frappe.meta.get_docfield(this.doctype, fieldname, this.frm ? this.frm.docname : null);\n    }\n\n    get_row(key) {\n        if (typeof key == 'number') {\n            if (key < 0) {\n                return this.grid_rows[this.grid_rows.length + key];\n            } else {\n                return this.grid_rows[key];\n            }\n        } else {\n            return this.grid_rows_by_docname[key];\n        }\n    }\n\n    get_grid_row(key) {\n        return this.get_row(key);\n    }\n\n    get_field(fieldname) {\n        // Note: workaround for get_query\n        if (!this.fieldinfo[fieldname])\n            this.fieldinfo[fieldname] = {\n            }\n        return this.fieldinfo[fieldname];\n    }\n\n    set_value(fieldname, value, doc) {\n        if (this.display_status !== \"None\" && this.grid_rows_by_docname[doc.name]) {\n            this.grid_rows_by_docname[doc.name].refresh_field(fieldname, value);\n        }\n    }\n\n    setup_add_row() {\n        this.wrapper.find(\".grid-add-row\").click(() => {\n            this.add_new_row(null, null, true, null, true);\n            this.set_focus_on_row();\n\n            return false;\n        });\n    }\n\n    add_new_row(idx, callback, show, copy_doc, go_to_last_page = false) {\n        if (this.is_editable()) {\n            if (go_to_last_page) {\n                this.grid_pagination.go_to_last_page_to_add_row();\n            }\n            if (this.frm) {\n                var d = frappe.model.add_child(this.frm.doc, this.df.options, this.df.fieldname, idx);\n                if (copy_doc) {\n                    d = this.duplicate_row(d, copy_doc);\n                }\n                d.__unedited = true;\n                this.frm.script_manager.trigger(this.df.fieldname + \"_add\", d.doctype, d.name);\n                this.refresh();\n            } else {\n                if (!this.df.data) {\n                    this.df.data = this.get_data() || [];\n                }\n                this.df.data.push({ idx: this.df.data.length + 1, __islocal: true });\n                this.refresh();\n            }\n\n            if (show) {\n                if (idx) {\n                    // always open inserted rows\n                    this.wrapper.find(\"[data-idx='\" + idx + \"']\").data(\"grid_row\")\n                        .toggle_view(true, callback);\n                } else {\n                    if (!this.allow_on_grid_editing()) {\n                        // open last row only if on-grid-editing is disabled\n                        this.wrapper.find(\".grid-row:last\").data(\"grid_row\")\n                            .toggle_view(true, callback);\n                    }\n                }\n            }\n\n            return d;\n        }\n    }\n\n    renumber_based_on_dom() {\n        // renumber based on dom\n        let $rows = $(this.parent).find(\".rows\");\n\n        $rows.find(\".grid-row\").each((i, item) => {\n            let $item = $(item);\n            let index = (this.grid_pagination.page_index - 1) * this.grid_pagination.page_length + i;\n            let d = locals[this.doctype][$item.attr('data-name')];\n            d.idx = index + 1;\n            $item.attr('data-idx', d.idx);\n\n            this.frm.doc[this.df.fieldname][index] = (d);\n            this.data[index] = d;\n            this.grid_rows[index] = (this.grid_rows_by_docname[d.name]);\n        });\n    }\n\n    duplicate_row(d, copy_doc) {\n        $.each(copy_doc, function (key, value) {\n            if (![\"creation\", \"modified\", \"modified_by\", \"idx\", \"owner\",\n                \"parent\", \"doctype\", \"name\", \"parentfield\"].includes(key)) {\n                d[key] = value;\n            }\n        });\n\n        return d;\n    }\n\n    set_focus_on_row(idx) {\n        if (!idx) {\n            idx = this.grid_rows.length - 1;\n        }\n\n        setTimeout(() => {\n            this.grid_rows[idx].row\n                .find('input[type=\"Text\"],textarea,select').filter(':visible:first').focus();\n        }, 100);\n    }\n\n    setup_visible_columns() {\n        if (this.visible_columns && this.visible_columns.length > 0) return;\n\n        this.user_defined_columns = [];\n        this.setup_user_defined_columns();\n        var total_colsize = 1,\n            fields = (this.user_defined_columns && this.user_defined_columns.length > 0)\n                ? this.user_defined_columns : this.editable_fields || this.docfields;\n\n        this.visible_columns = [];\n\n        for (var ci in fields) {\n            var _df = fields[ci];\n\n            // get docfield if from fieldname\n            df = (this.user_defined_columns && this.user_defined_columns.length > 0) ? _df : this.fields_map[_df.fieldname];\n\n            if (df && !df.hidden\n                && (this.editable_fields || df.in_list_view)\n                && (this.frm && this.frm.get_perm(df.permlevel, \"read\") || !this.frm)\n                && !in_list(frappe.model.layout_fields, df.fieldtype)) {\n\n                if (df.columns) {\n                    df.colsize = df.columns;\n                } else {\n                    this.update_default_colsize(df);\n                }\n\n                // attach formatter on refresh\n                if (df.fieldtype == 'Link' && !df.formatter && df.parent && frappe.meta.docfield_map[df.parent]) {\n                    const docfield = frappe.meta.docfield_map[df.parent][df.fieldname];\n                    if (docfield && docfield.formatter) {\n                        df.formatter = docfield.formatter;\n                    }\n                }\n\n                total_colsize += df.colsize;\n                if (total_colsize > 1100)\n                    return false;\n                this.visible_columns.push([df, df.colsize]);\n            }\n        }\n\n        // redistribute if total-col size is less than 12\n        var passes = 0;\n        while (total_colsize < 11 && passes < 12) {\n            for (var i in this.visible_columns) {\n                var df = this.visible_columns[i][0];\n                var colsize = this.visible_columns[i][1];\n                if (colsize > 1 && colsize < 11\n                    && !in_list(frappe.model.std_fields_list, df.fieldname)) {\n\n                    if (passes < 3 && [\"Int\", \"Currency\", \"Float\", \"Check\", \"Percent\"].indexOf(df.fieldtype) !== -1) {\n                        // don't increase col size of these fields in first 3 passes\n                        continue;\n                    }\n\n                    this.visible_columns[i][1] += 1;\n                    total_colsize++;\n                }\n\n                if (total_colsize > 1000)\n                    break;\n            }\n            passes++;\n        }\n    }\n\n    update_default_colsize(df) {\n        var colsize = 2;\n        switch (df.fieldtype) {\n            case \"Text\": break;\n            case \"Small Text\": colsize = 3; break;\n            case \"Check\": colsize = 1;\n        }\n        df.colsize = colsize;\n    }\n\n    setup_user_defined_columns() {\n        if (this.frm) {\n            let user_settings = frappe.get_user_settings(this.frm.doctype, 'GridView');\n            if (user_settings && user_settings[this.doctype] && user_settings[this.doctype].length) {\n                this.user_defined_columns = user_settings[this.doctype].map(row => {\n                    let column = frappe.meta.get_docfield(this.doctype, row.fieldname);\n                    if (column) {\n                        column.in_list_view = 1;\n                        column.columns = row.columns;\n                        return column;\n                    }\n                });\n            }\n        }\n    }\n\n    is_editable() {\n        return this.display_status == \"Write\" && !this.static_rows;\n    }\n\n    is_sortable() {\n        return this.sortable_status || this.is_editable();\n    }\n\n    only_sortable(status) {\n        if (status === undefined ? true : status) {\n            this.sortable_status = true;\n            this.static_rows = true;\n        }\n    }\n\n    set_multiple_add(link, qty) {\n        if (this.multiple_set) return;\n\n        var link_field = frappe.meta.get_docfield(this.df.options, link);\n        var btn = $(this.wrapper).find(\".grid-add-multiple-rows\");\n\n        // show button\n        btn.removeClass('hidden');\n\n        // open link selector on click\n        btn.on(\"click\", () => {\n            new frappe.ui.form.LinkSelector({\n                doctype: link_field.options,\n                fieldname: link,\n                qty_fieldname: qty,\n                target: this,\n                txt: \"\"\n            });\n            this.grid_pagination.go_to_last_page_to_add_row();\n            return false;\n        });\n        this.multiple_set = true;\n    }\n\n    setup_allow_bulk_edit() {\n        let me = this;\n        if (this.frm && this.frm.get_docfield(this.df.fieldname).allow_bulk_edit) {\n            // download\n            this.setup_download();\n\n            const value_formatter_map = {\n                \"Date\": val => val ? frappe.datetime.user_to_str(val) : val,\n                \"Int\": val => cint(val),\n                \"Check\": val => cint(val),\n                \"Float\": val => flt(val),\n            };\n\n            // upload\n            frappe.flags.no_socketio = true;\n            $(this.wrapper).find(\".grid-upload\").removeClass('hidden').on(\"click\", () => {\n                new frappe.ui.FileUploader({\n                    as_dataurl: true,\n                    allow_multiple: false,\n                    on_success(file) {\n                        var data = frappe.utils.csv_to_array(frappe.utils.get_decoded_string(file.dataurl));\n                        // row #2 contains fieldnames;\n                        var fieldnames = data[2];\n                        me.frm.clear_table(me.df.fieldname);\n                        $.each(data, (i, row) => {\n                            if (i > 6) {\n                                var blank_row = true;\n                                $.each(row, function (ci, value) {\n                                    if (value) {\n                                        blank_row = false;\n                                        return false;\n                                    }\n                                });\n\n                                if (!blank_row) {\n                                    var d = me.frm.add_child(me.df.fieldname);\n                                    $.each(row, (ci, value) => {\n                                        var fieldname = fieldnames[ci];\n                                        var df = frappe.meta.get_docfield(me.df.options, fieldname);\n                                        if (df) {\n                                            d[fieldnames[ci]] = value_formatter_map[df.fieldtype]\n                                                ? value_formatter_map[df.fieldtype](value)\n                                                : value;\n                                        }\n                                    });\n                                }\n                            }\n                        });\n\n                        me.frm.refresh_field(me.df.fieldname);\n                        frappe.msgprint({ message: __('Table updated'), title: __('Success'), indicator: 'green' });\n                    }\n                });\n                return false;\n            });\n        }\n    }\n\n    setup_download() {\n        let title = this.df.label || frappe.model.unscrub(this.df.fieldname);\n        $(this.wrapper).find(\".grid-download\").removeClass('hidden').on(\"click\", () => {\n            var data = [];\n            var docfields = [];\n            data.push([__(\"Bulk Edit {0}\", [title])]);\n            data.push([]);\n            data.push([]);\n            data.push([]);\n            data.push([__(\"The CSV format is case sensitive\")]);\n            data.push([__(\"Do not edit headers which are preset in the template\")]);\n            data.push([\"------\"]);\n            $.each(frappe.get_meta(this.df.options).fields, (i, df) => {\n                // don't include the read-only field in the template\n                if (frappe.model.is_value_type(df.fieldtype)) {\n                    data[1].push(df.label);\n                    data[2].push(df.fieldname);\n                    let description = (df.description || \"\") + ' ';\n                    if (df.fieldtype === \"Date\") {\n                        description += frappe.boot.sysdefaults.date_format;\n                    }\n                    data[3].push(description);\n                    docfields.push(df);\n                }\n            });\n\n            // add data\n            $.each(this.frm.doc[this.df.fieldname] || [], (i, d) => {\n                var row = [];\n                $.each(data[2], (i, fieldname) => {\n                    var value = d[fieldname];\n\n                    // format date\n                    if (docfields[i].fieldtype === \"Date\" && value) {\n                        value = frappe.datetime.str_to_user(value);\n                    }\n\n                    row.push(value || \"\");\n                });\n                data.push(row);\n            });\n\n            frappe.tools.downloadify(data, null, title);\n            return false;\n        });\n    }\n\n    add_custom_button(label, click, position = 'bottom') {\n        // add / unhide a custom button\n        const $wrapper = position === 'top' ? this.grid_custom_buttons : this.grid_buttons;\n        let $btn = this.custom_buttons[label];\n        if (!$btn) {\n            $btn = $(`<button class=\"btn btn-default btn-xs btn-custom\">${__(label)}</button>`)\n                .prependTo($wrapper)\n                .on('click', click);\n            this.custom_buttons[label] = $btn;\n        } else {\n            $btn.removeClass('hidden');\n        }\n        return $btn;\n    }\n\n    clear_custom_buttons() {\n        // hide all custom buttons\n        this.grid_buttons.find('.btn-custom').addClass('hidden');\n    }\n\n    update_docfield_property(fieldname, property, value) {\n        // update the docfield of each row\n        if (!this.grid_rows) {\n            return;\n        }\n\n        for (let row of this.grid_rows) {\n            let docfield = row.docfields.find(d => d.fieldname === fieldname);\n            if (docfield) {\n                docfield[property] = value;\n            } else {\n                throw `field ${fieldname} not found`;\n            }\n        }\n\n        // update the parent too (for new rows)\n        this.docfields.find(d => d.fieldname === fieldname)[property] = value;\n\n        this.debounced_refresh();\n    }\n}"],
  "mappings": "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",
  "names": []
}
